# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
  
variables:
  - name: serviceConnection
    value: "connectivity-hub-connection"
  - name: workingDirectory
    value: $(Build.Repository.LocalPath)/infrastructure/terraform_notificationhub
  - name: 'tfStateResourceGroupName'
    value: 'rg-we-prd-01-notification-hub-setup'
  - name: 'tfStateAzureStorageAccountName'
    value: 'notificationhubsetupprd01'
  - name: 'tfStateContainerName'
    value: 'tfstate'
  - name: 'tfStateFileName'
    value: 'terraform.tfstate'

stages:
- stage: Plan
  jobs:
    - job: Plan
      steps:
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: "Render backend"
        inputs:
          rootDirectory: $(Build.Repository.LocalPath)/infrastructure/terraform_notificationhub
          targetFiles: |
            backend.tf
          verbosity: detailed
          tokenPattern: custom
          tokenPrefix: "#{"
          tokenSuffix: "#}"

      - task: AzureCLI@2
        displayName: Setup azure authentication
        inputs:
          scriptType: bash
          addSpnToEnvironment: true
          connectedServiceNameARM: ${{ variables.serviceConnection }}
          scriptLocation: inlineScript
          failOnStandardError: true
          inlineScript: |
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
            echo "$(az account show --query="id" -o tsv)"
            echo "${servicePrincipalId}"
            echo "${servicePrincipalKey}"
            echo "$(az account show --query="tenantId" -o tsv)"
            echo "${{variables.workingDirectory}}"

      - task: AzureCLI@2
        displayName: Terraform init
        inputs:
          scriptType: bash
          addSpnToEnvironment: true
          connectedServiceNameARM: ${{ variables.serviceConnection }}
          workingDirectory: ${{ variables.workingDirectory }}
          scriptLocation: inlineScript
          failOnStandardError: true
          inlineScript: |
            pwd
            ls -laR
            terraform init -no-color -input=false
            chmod +x -R .terraform
            terraform validate
      
      #- task: TerraformTaskV3@3
      #  displayName: Initialize Terraform
      #  inputs:
      #    provider: 'azurerm'
      #    command: 'init'
      #    backendServiceArm: 'lab-05'
      #    backendAzureRmResourceGroupName: 'mb-student5'
      #    backendAzureRmStorageAccountName: 'mbstudent5tfstate'
      #    backendAzureRmContainerName: 'tfstate'
      #    backendAzureRmKey: 'devops.tfstate'
      #
      #- task: TerraformTaskV3@3
      #  name: terraformPlan
      #  displayName: Create Terraform Plan
      #  inputs:
      #    provider: 'azurerm'
      #    command: 'plan'
      #    commandOptions: '-out main.tfplan'
      #    environmentServiceNameAzureRM: 'lab-05'

#- stage: Execute
# Only runs if the 'terraformPlan' task has detected changes the in state. 
#  condition: eq(variables['terraformPlan.changesPresent'], 'true')
#  jobs:
#    - deployment: 'Execute'
#      environment: 'dev'
#      strategy:
#          runOnce:
#            deploy:
#              steps:
#                - task: TerraformTaskV3@3
#                  displayName: Initialize Terraform
#                  inputs:
#                    provider: 'azurerm'
#                    command: 'init'
#                    backendServiceArm: 'lab-05'
#                    backendAzureRmResourceGroupName: 'mb-student5'
#                    backendAzureRmStorageAccountName: 'mbstudent5tfstate'
#                    backendAzureRmContainerName: 'tfstate'
#                    backendAzureRmKey: 'devops.tfstate'
#                - task: TerraformTaskV3@3
#                  displayName: Apply Terraform Plan
#                  inputs:
#                    provider: 'azurerm'
#                    command: 'apply'
#                    commandOptions: 'main.tfplan'
#                    environmentServiceNameAzureRM: 'lab-05'
